# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rhA9GesHjSPwCNKY7mExnL9ZOmmT4dT7
"""
import os
from google import genai
from google.genai.types import HttpOptions
from langdetect import detect

# ‚ö†Ô∏è Replace with your actual Gemini API key
os.environ["GEMINI_API_KEY"] = "AIzaSyC1GdvjpM4JJa8rZdmqU3LnEKScvAj65ow"

# Initialize Gemini client
client = genai.Client(http_options=HttpOptions(api_version="v1"))
MODEL = "gemini-2.5-flash"

# Call Gemini helper
def call_gemini(prompt, temperature=0.2, max_output_tokens=400):
    resp = client.models.generate_content(
        model=MODEL,
        contents=prompt,
        config={"temperature": temperature, "maxOutputTokens": max_output_tokens}
    )
    return resp.text

SYSTEM_INSTRUCTIONS = """
You are MedTriage, a kind medical assistant.
Your job:
1) When a user describes symptoms, ask **one clear follow-up question at a time**, like a doctor would.
   (Example: "How long have you had the headache?" or "Is the cough dry or with phlegm?")
2) Continue asking short questions until you have enough detail (around 3‚Äì5 turns).
3) Then give a **final response**:
   - Possible cause in simple words
   - 2‚Äì3 home-care tips/remedies
   - Safety advice: when to see a doctor
4) Always be empathetic, short, and clear.
5) If symptoms are dangerous (chest pain, breathing trouble, fainting, heavy bleeding, stroke signs), **immediately say it may be serious and advise urgent hospital visit**.
6) If the user types in Hindi, reply in Hindi. If in English, reply in English.
7) Do not output JSON or structured fields ‚Äî just plain helpful text.
8) Do not prescribe specific medicines by name, only simple remedies (rest, fluids, warm water, etc.).
"""

conversation = {
    "turns": [],
    "done": False
}

def medtriage_chat(user_input):
    if conversation["done"]:
        return "‚úÖ Session complete. Please start a new chat."

    # Language detect (for safety, but Gemini also handles bilingual automatically)
    try:
        lang = detect(user_input)
    except:
        lang = "en"

    # Build conversation history
    history_text = ""
    for role, text in conversation["turns"]:
        history_text += f"{role.upper()}: {text}\n"

    # Prompt to Gemini
    prompt = f"""
{SYSTEM_INSTRUCTIONS}

Conversation so far:
{history_text}
USER: {user_input}
ASSISTANT:"""

    # Call Gemini
    reply = call_gemini(prompt)

    # Save state
    conversation["turns"].append(("user", user_input))
    conversation["turns"].append(("assistant", reply))

    # If bot gave final advice, end session
    if any(word in reply.lower() for word in ["it may be", "possible cause", "likely", "advice", "doctor"]):
        conversation["done"] = True

    return reply

def reset_conversation():
    global conversation
    conversation = {
        "turns": [],
        "done": False
    }
    return "üîÑ Chat reset. Please describe your symptoms."

import gradio as gr

with gr.Blocks() as demo:
    gr.Markdown("## ü©∫ MedTriage - Health Chatbot\nType your symptoms in **English or Hindi**. (‚ö†Ô∏è Not a substitute for a doctor.)")

    chatbot = gr.Chatbot()
    msg = gr.Textbox(placeholder="Describe your symptoms here...")
    clear = gr.Button("Reset Chat")

    def respond(message, chat_history):
        bot_reply = medtriage_chat(message)
        chat_history.append((message, bot_reply))
        return "", chat_history

    def clear_fn():
        reset_conversation()
        return []

    msg.submit(respond, [msg, chatbot], [msg, chatbot])
    clear.click(clear_fn, outputs=chatbot)

demo.launch(share=True)   # share=True creates a public link for judges