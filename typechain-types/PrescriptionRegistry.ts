/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PrescriptionRegistry {
  export type PrescriptionStruct = {
    id: BigNumberish;
    doctor: AddressLike;
    medicines: string[];
    dosages: string[];
    consultationDate: string;
    expiryDate: string;
    valid: boolean;
    dispensed: boolean;
    dispensedBy: AddressLike;
    dispensedAt: BigNumberish;
  };

  export type PrescriptionStructOutput = [
    id: bigint,
    doctor: string,
    medicines: string[],
    dosages: string[],
    consultationDate: string,
    expiryDate: string,
    valid: boolean,
    dispensed: boolean,
    dispensedBy: string,
    dispensedAt: bigint
  ] & {
    id: bigint;
    doctor: string;
    medicines: string[];
    dosages: string[];
    consultationDate: string;
    expiryDate: string;
    valid: boolean;
    dispensed: boolean;
    dispensedBy: string;
    dispensedAt: bigint;
  };
}

export interface PrescriptionRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "authorizeDoctor"
      | "authorizePharmacy"
      | "authorizedDoctors"
      | "authorizedPharmacies"
      | "dispensePrescription"
      | "getPrescriptionBasicInfo"
      | "getPrescriptionDetails"
      | "getPrescriptionDosages"
      | "getPrescriptionMedicines"
      | "issuePrescription"
      | "prescriptionCount"
      | "prescriptions"
      | "verifyPrescription"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DoctorAuthorized"
      | "PharmacyAuthorized"
      | "PrescriptionDispensed"
      | "PrescriptionIssued"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorizeDoctor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizePharmacy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedDoctors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedPharmacies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dispensePrescription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrescriptionBasicInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrescriptionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrescriptionDosages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrescriptionMedicines",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issuePrescription",
    values: [string[], string[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "prescriptionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prescriptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPrescription",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizePharmacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedDoctors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedPharmacies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispensePrescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrescriptionBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrescriptionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrescriptionDosages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrescriptionMedicines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issuePrescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prescriptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prescriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPrescription",
    data: BytesLike
  ): Result;
}

export namespace DoctorAuthorizedEvent {
  export type InputTuple = [doctor: AddressLike];
  export type OutputTuple = [doctor: string];
  export interface OutputObject {
    doctor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PharmacyAuthorizedEvent {
  export type InputTuple = [pharmacy: AddressLike];
  export type OutputTuple = [pharmacy: string];
  export interface OutputObject {
    pharmacy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrescriptionDispensedEvent {
  export type InputTuple = [id: BigNumberish, pharmacy: AddressLike];
  export type OutputTuple = [id: bigint, pharmacy: string];
  export interface OutputObject {
    id: bigint;
    pharmacy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrescriptionIssuedEvent {
  export type InputTuple = [id: BigNumberish, doctor: AddressLike];
  export type OutputTuple = [id: bigint, doctor: string];
  export interface OutputObject {
    id: bigint;
    doctor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrescriptionRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PrescriptionRegistry;
  waitForDeployment(): Promise<this>;

  interface: PrescriptionRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  authorizeDoctor: TypedContractMethod<
    [_doctor: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizePharmacy: TypedContractMethod<
    [_pharmacy: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedDoctors: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  authorizedPharmacies: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  dispensePrescription: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPrescriptionBasicInfo: TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, string, string, string, boolean, boolean, string, bigint] & {
        id: bigint;
        doctor: string;
        consultationDate: string;
        expiryDate: string;
        valid: boolean;
        dispensed: boolean;
        dispensedBy: string;
        dispensedAt: bigint;
      }
    ],
    "view"
  >;

  getPrescriptionDetails: TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        bigint,
        string,
        string[],
        string[],
        string,
        string,
        boolean,
        boolean,
        string,
        bigint
      ] & {
        id: bigint;
        doctor: string;
        medicines: string[];
        dosages: string[];
        consultationDate: string;
        expiryDate: string;
        valid: boolean;
        dispensed: boolean;
        dispensedBy: string;
        dispensedAt: bigint;
      }
    ],
    "view"
  >;

  getPrescriptionDosages: TypedContractMethod<
    [_id: BigNumberish],
    [string[]],
    "view"
  >;

  getPrescriptionMedicines: TypedContractMethod<
    [_id: BigNumberish],
    [string[]],
    "view"
  >;

  issuePrescription: TypedContractMethod<
    [
      _medicines: string[],
      _dosages: string[],
      _consultationDate: string,
      _expiryDate: string
    ],
    [bigint],
    "nonpayable"
  >;

  prescriptionCount: TypedContractMethod<[], [bigint], "view">;

  prescriptions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, boolean, boolean, string, bigint] & {
        id: bigint;
        doctor: string;
        consultationDate: string;
        expiryDate: string;
        valid: boolean;
        dispensed: boolean;
        dispensedBy: string;
        dispensedAt: bigint;
      }
    ],
    "view"
  >;

  verifyPrescription: TypedContractMethod<
    [_id: BigNumberish],
    [[boolean, boolean, PrescriptionRegistry.PrescriptionStructOutput]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authorizeDoctor"
  ): TypedContractMethod<[_doctor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizePharmacy"
  ): TypedContractMethod<[_pharmacy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedDoctors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedPharmacies"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "dispensePrescription"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPrescriptionBasicInfo"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, string, string, string, boolean, boolean, string, bigint] & {
        id: bigint;
        doctor: string;
        consultationDate: string;
        expiryDate: string;
        valid: boolean;
        dispensed: boolean;
        dispensedBy: string;
        dispensedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrescriptionDetails"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        bigint,
        string,
        string[],
        string[],
        string,
        string,
        boolean,
        boolean,
        string,
        bigint
      ] & {
        id: bigint;
        doctor: string;
        medicines: string[];
        dosages: string[];
        consultationDate: string;
        expiryDate: string;
        valid: boolean;
        dispensed: boolean;
        dispensedBy: string;
        dispensedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrescriptionDosages"
  ): TypedContractMethod<[_id: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPrescriptionMedicines"
  ): TypedContractMethod<[_id: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "issuePrescription"
  ): TypedContractMethod<
    [
      _medicines: string[],
      _dosages: string[],
      _consultationDate: string,
      _expiryDate: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prescriptionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "prescriptions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, boolean, boolean, string, bigint] & {
        id: bigint;
        doctor: string;
        consultationDate: string;
        expiryDate: string;
        valid: boolean;
        dispensed: boolean;
        dispensedBy: string;
        dispensedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyPrescription"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [[boolean, boolean, PrescriptionRegistry.PrescriptionStructOutput]],
    "view"
  >;

  getEvent(
    key: "DoctorAuthorized"
  ): TypedContractEvent<
    DoctorAuthorizedEvent.InputTuple,
    DoctorAuthorizedEvent.OutputTuple,
    DoctorAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "PharmacyAuthorized"
  ): TypedContractEvent<
    PharmacyAuthorizedEvent.InputTuple,
    PharmacyAuthorizedEvent.OutputTuple,
    PharmacyAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "PrescriptionDispensed"
  ): TypedContractEvent<
    PrescriptionDispensedEvent.InputTuple,
    PrescriptionDispensedEvent.OutputTuple,
    PrescriptionDispensedEvent.OutputObject
  >;
  getEvent(
    key: "PrescriptionIssued"
  ): TypedContractEvent<
    PrescriptionIssuedEvent.InputTuple,
    PrescriptionIssuedEvent.OutputTuple,
    PrescriptionIssuedEvent.OutputObject
  >;

  filters: {
    "DoctorAuthorized(address)": TypedContractEvent<
      DoctorAuthorizedEvent.InputTuple,
      DoctorAuthorizedEvent.OutputTuple,
      DoctorAuthorizedEvent.OutputObject
    >;
    DoctorAuthorized: TypedContractEvent<
      DoctorAuthorizedEvent.InputTuple,
      DoctorAuthorizedEvent.OutputTuple,
      DoctorAuthorizedEvent.OutputObject
    >;

    "PharmacyAuthorized(address)": TypedContractEvent<
      PharmacyAuthorizedEvent.InputTuple,
      PharmacyAuthorizedEvent.OutputTuple,
      PharmacyAuthorizedEvent.OutputObject
    >;
    PharmacyAuthorized: TypedContractEvent<
      PharmacyAuthorizedEvent.InputTuple,
      PharmacyAuthorizedEvent.OutputTuple,
      PharmacyAuthorizedEvent.OutputObject
    >;

    "PrescriptionDispensed(uint256,address)": TypedContractEvent<
      PrescriptionDispensedEvent.InputTuple,
      PrescriptionDispensedEvent.OutputTuple,
      PrescriptionDispensedEvent.OutputObject
    >;
    PrescriptionDispensed: TypedContractEvent<
      PrescriptionDispensedEvent.InputTuple,
      PrescriptionDispensedEvent.OutputTuple,
      PrescriptionDispensedEvent.OutputObject
    >;

    "PrescriptionIssued(uint256,address)": TypedContractEvent<
      PrescriptionIssuedEvent.InputTuple,
      PrescriptionIssuedEvent.OutputTuple,
      PrescriptionIssuedEvent.OutputObject
    >;
    PrescriptionIssued: TypedContractEvent<
      PrescriptionIssuedEvent.InputTuple,
      PrescriptionIssuedEvent.OutputTuple,
      PrescriptionIssuedEvent.OutputObject
    >;
  };
}
